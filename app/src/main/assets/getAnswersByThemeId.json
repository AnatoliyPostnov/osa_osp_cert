{
  "theme_id": 1,
  "theme_content": "Declarations and Access Control",
  "questions": [
    {
      "question_id": 1,
      "correct_answers": [3],
      "explanation": "1 is incorrect because classes implement interfaces, they don't extend them. 2 is incorrect because interfaces only \"inherit from\" other interfaces. 4 is incorrect based on the preceding rules."
    },
    {
      "question_id": 2,
      "correct_answers": [2, 6],
      "explanation": "2 and 6 are correct. Since Rocket.blastOff() is private, it can't be overridden, and it is invisible to class Shuttle. 1, 3, 4, and 5 are incorrect based on the above."
    },
    {
      "question_id": 3,
      "correct_answers": [2],
      "explanation": "2 is correct. This question is using valid (but inappropriate and weird) identifiers, static imports, main(), and pre-incrementing logic. 1, 3, 4, 5, 6, and 7 are incorrect based on the above."
    },
    {
      "question_id": 4,
      "correct_answers": [1],
      "explanation": "1 is correct; enums can have constructors and variables. 2, 3, 4, 5, and 6 are incorrect; these lines all use correct syntax."
    },
    {
      "question_id": 5,
      "correct_answers": [4, 5],
      "explanation": "4 and 5 are correct. Variable a has default access, so it cannot be accessed from outside the package. Variable b has protected access in pkgA. 1, 2, 3, and 6 are incorrect based on the above information."
    }
  ]
}